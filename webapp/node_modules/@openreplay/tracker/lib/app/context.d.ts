export interface Window extends globalThis.Window {
    HTMLInputElement: typeof HTMLInputElement;
    HTMLLinkElement: typeof HTMLLinkElement;
    HTMLStyleElement: typeof HTMLStyleElement;
    SVGStyleElement: typeof SVGStyleElement;
    HTMLIFrameElement: typeof HTMLIFrameElement;
    Text: typeof Text;
    Element: typeof Element;
    ShadowRoot: typeof ShadowRoot;
}
declare type WindowConstructor = Document | Element | Text | ShadowRoot | HTMLInputElement | HTMLLinkElement | HTMLStyleElement | HTMLIFrameElement;
declare type Constructor<T> = {
    new (...args: any[]): T;
    name: string;
};
export declare function isInstance<T extends WindowConstructor>(node: Node, constr: Constructor<T>): node is T;
export declare function inDocument(node: Node): boolean;
export {};
