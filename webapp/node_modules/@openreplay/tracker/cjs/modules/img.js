"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_js_1 = require("../utils.js");
const index_js_1 = require("../messages/index.js");
const PLACEHOLDER_SRC = "https://static.openreplay.com/tracker/placeholder.jpeg";
function default_1(app) {
    function sendPlaceholder(id, node) {
        app.send(new index_js_1.SetNodeAttribute(id, "src", PLACEHOLDER_SRC));
        const { width, height } = node.getBoundingClientRect();
        if (!node.hasAttribute("width")) {
            app.send(new index_js_1.SetNodeAttribute(id, "width", String(width)));
        }
        if (!node.hasAttribute("height")) {
            app.send(new index_js_1.SetNodeAttribute(id, "height", String(height)));
        }
    }
    const sendImgSrc = app.safe(function () {
        const id = app.nodes.getID(this);
        if (id === undefined) {
            return;
        }
        const { src, complete, naturalWidth, naturalHeight } = this;
        if (!complete) {
            return;
        }
        if (naturalWidth === 0 && naturalHeight === 0) {
            if (src != null && (0, utils_js_1.isURL)(src)) { // TODO: How about relative urls ? Src type is null sometimes.
                app.send(new index_js_1.ResourceTiming((0, utils_js_1.timestamp)(), 0, 0, 0, 0, 0, src, 'img'));
            }
        }
        else if (src.length >= 1e5 || app.sanitizer.isMasked(id)) {
            sendPlaceholder(id, this);
        }
        else {
            app.send(new index_js_1.SetNodeAttributeURLBased(id, 'src', src, app.getBaseHref()));
        }
    });
    const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
            if (mutation.type === "attributes" && mutation.attributeName === "src") {
                const target = mutation.target;
                const id = app.nodes.getID(target);
                if (id === undefined) {
                    return;
                }
                const src = target.src;
                app.send(new index_js_1.SetNodeAttributeURLBased(id, 'src', src, app.getBaseHref()));
            }
        }
    });
    app.nodes.attachNodeCallback((node) => {
        if (!(node instanceof HTMLImageElement)) {
            return;
        }
        app.nodes.attachElementListener('error', node, sendImgSrc);
        app.nodes.attachElementListener('load', node, sendImgSrc);
        sendImgSrc.call(node);
        observer.observe(node, { attributes: true });
    });
}
exports.default = default_1;
