/// <reference types="react" />
import { UiProps } from '@tolgee/core';
declare type FormTranslations = {
    [key: string]: string;
};
declare type DialogProps = {
    keyName: string;
    defaultValue: string;
    open: boolean;
    onClose: () => void;
    uiProps: UiProps;
    ns: string[];
};
export declare const DialogProvider: import("react").FC<DialogProps>, useDialogActions: () => {
    onInputChange: (key: string, value: string) => void;
    handleUploadImages: (files: File[]) => Promise<void>;
    handleTakeScreenshot: () => void;
    handleRemoveScreenshot: (id: number) => void;
    onSave: () => Promise<void>;
    onClose: () => void;
    onSelectedLanguagesChange: (languages: string[]) => void;
    setContainer: import("react").Dispatch<import("react").SetStateAction<Element | undefined>>;
    setUseBrowserWindow: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    setScreenshotDetail: import("react").Dispatch<import("react").SetStateAction<import("./useGallery").ScreenshotInterface | null>>;
    setSelectedNs: import("react").Dispatch<import("react").SetStateAction<string>>;
    setTags: import("react").Dispatch<import("react").SetStateAction<string[]>>;
}, useDialogContext: <SelectorReturn>(selector: (state: {
    readonly input: string;
    readonly open: boolean;
    readonly ns: string[];
    readonly selectedNs: string;
    readonly loading: boolean;
    readonly saving: boolean;
    readonly success: boolean;
    readonly error: any;
    readonly availableLanguages: {
        id: number;
        name: string;
        tag: string;
        originalName?: string | undefined;
        flagEmoji?: string | undefined;
        base: boolean;
    }[] | undefined;
    readonly selectedLanguages: string[];
    readonly formDisabled: boolean;
    readonly translations: {
        keyId: number;
        keyName: string;
        keyNamespace?: string | undefined;
        keyTags: {
            id: number;
            name: string;
        }[];
        screenshotCount: number;
        screenshots?: {
            id: number;
            filename: string;
            thumbnail: string;
            fileUrl: string;
            thumbnailUrl: string;
            createdAt?: string | undefined;
        }[] | undefined;
        translations: {
            [key: string]: {
                id: number;
                text?: string | undefined;
                state: "UNTRANSLATED" | "TRANSLATED" | "REVIEWED";
                auto: boolean;
                mtProvider?: "GOOGLE" | "AWS" | "DEEPL" | "AZURE" | undefined;
                commentCount: number;
                unresolvedCommentCount: number;
                fromTranslationMemory: boolean;
            };
        };
    } | undefined;
    readonly translationsForm: FormTranslations;
    readonly container: Element | undefined;
    readonly useBrowserWindow: boolean;
    readonly canTakeScreenshots: boolean | undefined;
    readonly takingScreenshot: boolean;
    readonly screenshotsUploading: boolean;
    readonly screenshots: import("./useGallery").ScreenshotInterface[];
    readonly screenshotDetail: import("./useGallery").ScreenshotInterface | null;
    readonly linkToPlatform: string | undefined;
    readonly keyExists: boolean;
    readonly scopes: string[] | undefined;
    readonly permittedLanguageIds: number[] | undefined;
    readonly tags: string[];
    readonly canEditTags: boolean;
}) => SelectorReturn) => SelectorReturn;
export {};
