export declare type FallbackGeneral = undefined | false | string | string[];
export declare type NsType = string;
export declare type KeyType = string;
export declare type NsFallback = undefined | NsType | NsType[];
export declare type FallbackLanguageObject = Record<string, FallbackGeneral>;
export declare type FallbackLanguageOption = FallbackGeneral | FallbackLanguageObject;
export declare type DefaultParamType = string | number | bigint;
export declare type TranslateParams<T = DefaultParamType> = {
    [key: string]: T;
};
export declare type TranslateOptions = {
    ns?: NsType | null;
    noWrap?: boolean;
    orEmpty?: boolean;
};
export declare type TranslateProps<T = DefaultParamType> = {
    key: KeyType;
    defaultValue?: string;
    params?: TranslateParams<T>;
} & TranslateOptions;
export declare type TranslatePropsInternal = TranslateProps & {
    translation?: string;
};
declare type PropType<TObj> = TObj[keyof TObj];
export declare type CombinedOptions<T> = TranslateOptions & {
    [key: string]: T | PropType<TranslateOptions>;
};
export declare type TFnType<T = DefaultParamType, R = string> = {
    (key: string, defaultValue?: string, options?: CombinedOptions<T>): R;
    (key: string, options?: CombinedOptions<T>): R;
    (props: TranslateProps<T>): R;
};
export declare type KeyAndNamespacesInternal = Pick<TranslatePropsInternal, 'key' | 'ns'>;
export {};
