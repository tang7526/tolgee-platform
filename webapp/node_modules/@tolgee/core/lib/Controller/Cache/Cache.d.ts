import { CacheDescriptor, CacheDescriptorInternal, CacheDescriptorWithKey, NsFallback, TranslationsFlat, TranslationValue, TreeTranslationsData, BackendGetRecord, BackendGetDevRecord } from '../../types';
import { EventEmitterInstance } from '../Events/EventEmitter';
import { TolgeeStaticData } from '../State/initState';
import { ValueObserverInstance } from '../ValueObserver';
export declare const Cache: (onCacheChange: EventEmitterInstance<CacheDescriptorWithKey>, backendGetRecord: BackendGetRecord, backendGetDevRecord: BackendGetDevRecord, withDefaultNs: (descriptor: CacheDescriptor) => CacheDescriptorInternal, isInitialLoading: () => boolean, fetchingObserver: ValueObserverInstance<boolean>, loadingObserver: ValueObserverInstance<boolean>) => Readonly<{
    addStaticData: (data: TolgeeStaticData | undefined) => void;
    invalidate: () => void;
    addRecord: (descriptor: CacheDescriptorInternal, data: TreeTranslationsData) => void;
    exists: (descriptor: CacheDescriptorInternal, strict?: boolean) => boolean;
    getRecord: (descriptor: CacheDescriptor) => TranslationsFlat | undefined;
    getTranslation: (descriptor: CacheDescriptorInternal, key: string) => TranslationValue;
    getTranslationNs: (namespaces: string[], languages: string[], key: string) => string[];
    getTranslationFallback: (namespaces: string[], languages: string[], key: string) => string | undefined;
    changeTranslation: (descriptor: CacheDescriptorInternal, key: string, value: TranslationValue) => void;
    isFetching: (ns?: NsFallback) => boolean;
    isLoading: (language: string | undefined, ns?: NsFallback) => boolean;
    loadRecords: (descriptors: CacheDescriptor[], isDev: boolean) => Promise<TranslationsFlat[]>;
    getAllRecords: () => {
        data: TranslationsFlat;
        language: string;
        namespace: string;
    }[];
}>;
export declare type CacheInstance = ReturnType<typeof Cache>;
