import { UserID, Metadata } from "../messages/index.js";
var ActivityState;
(function (ActivityState) {
    ActivityState[ActivityState["NotActive"] = 0] = "NotActive";
    ActivityState[ActivityState["Starting"] = 1] = "Starting";
    ActivityState[ActivityState["Active"] = 2] = "Active";
})(ActivityState || (ActivityState = {}));
export default class Session {
    constructor(app) {
        this.app = app;
        this.metadata = {};
        this.userID = null;
        this.sessionID = null;
        this.activityState = ActivityState.NotActive;
        this.callbacks = [];
    }
    attachUpdateCallback(cb) {
        this.callbacks.push(cb);
    }
    handleUpdate() {
        const sessInfo = this.getInfo();
        if (sessInfo.userID == null) {
            delete sessInfo.userID;
        }
        if (sessInfo.sessionID == null) {
            delete sessInfo.sessionID;
        }
        this.callbacks.forEach(cb => cb(sessInfo));
    }
    update({ userID, metadata, sessionID }) {
        if (userID != null) { // TODO clear nullable/undefinable types
            this._setUserID(userID);
        }
        if (metadata !== undefined) {
            Object.entries(metadata).forEach(kv => this._setMetadata(...kv));
        }
        if (sessionID !== undefined) {
            this.sessionID = sessionID;
        }
        this.handleUpdate();
    }
    _setMetadata(key, value) {
        this.app.send(new Metadata(key, value));
        this.metadata[key] = value;
    }
    _setUserID(userID) {
        this.app.send(new UserID(userID));
        this.userID = userID;
    }
    setMetadata(key, value) {
        this._setMetadata(key, value);
        this.handleUpdate();
    }
    setUserID(userID) {
        this._setUserID(userID);
        this.handleUpdate();
    }
    getInfo() {
        return {
            sessionID: this.sessionID,
            metadata: this.metadata,
            userID: this.userID,
        };
    }
}
