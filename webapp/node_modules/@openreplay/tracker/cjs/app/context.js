"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inDocument = exports.isInstance = void 0;
// TODO: we need a type expert here so we won't have to ignore the lines
// TODO: use it everywhere (static function; export from which file? <-- global Window typing required)
function isInstance(node, constr) {
    const doc = node.ownerDocument;
    if (!doc) { // null if Document
        return constr.name === 'Document';
    }
    let context = 
    // @ts-ignore (for EI, Safary)
    doc.parentWindow ||
        doc.defaultView; // TODO: smart global typing for Window object
    while ((context.parent || context.top) && context.parent !== context) {
        // @ts-ignore
        if (node instanceof context[constr.name]) {
            return true;
        }
        // @ts-ignore
        context = context.parent || context.top;
    }
    // @ts-ignore
    return node instanceof context[constr.name];
}
exports.isInstance = isInstance;
// TODO: ensure 1. it works in every cases (iframes/detached nodes) and 2. the most efficient
function inDocument(node) {
    const doc = node.ownerDocument;
    if (!doc) {
        return true;
    } // Document
    let current = node;
    while (current) {
        if (current === doc) {
            return true;
        }
        else if (isInstance(current, ShadowRoot)) {
            current = current.host;
        }
        else {
            current = current.parentNode;
        }
    }
    return false;
}
exports.inDocument = inDocument;
// export function inDocument(node: Node): boolean {
//   // @ts-ignore compatability
//   if (node.getRootNode) {
//     let root: Node
//     while ((root = node.getRootNode()) !== node) {
//        ////
//     }
//   }
//   const doc = node.ownerDocument
//   if (!doc) { return false }
//   if (doc.contains(node)) { return true }
//   let context: Window = 
//     // @ts-ignore (for EI, Safary)
//     doc.parentWindow || 
//     doc.defaultView;
//   while(context.parent && context.parent !== context) {
//     if (context.document.contains(node)) {
//       return true
//     }
//     // @ts-ignore
//     context = context.parent
//   }
//   return false;
// }
