import { paths } from './apiSchema.generated';
declare type ExcludeAk<T extends Record<string, Record<string, any>>> = Omit<T, 'query'> & {
    query?: Omit<T['query'], 'ak'>;
};
export declare type RequestParamsType<Url extends keyof Paths, Method extends keyof Paths[Url], Paths = paths> = ExcludeAk<Omit<OperationSchema<Url, Method, Paths>['parameters'], 'header'>> & OperationSchema<Url, Method, Paths>['requestBody'];
export declare type ResponseContent<Url extends keyof Paths, Method extends keyof Paths[Url], Paths> = OperationSchema<Url, Method, Paths>['responses'][200] extends NotNullAnyContent ? OperationSchema<Url, Method, Paths>['responses'][200]['content']['*/*'] : OperationSchema<Url, Method, Paths>['responses'][200] extends NotNullJsonHalContent ? OperationSchema<Url, Method, Paths>['responses'][200]['content']['application/hal+json'] : OperationSchema<Url, Method, Paths>['responses'][200] extends NotNullJsonContent ? OperationSchema<Url, Method, Paths>['responses'][200]['content']['application/json'] : OperationSchema<Url, Method, Paths>['responses'][201] extends NotNullAnyContent ? OperationSchema<Url, Method, Paths>['responses'][201]['content']['*/*'] : void;
declare type NotNullAnyContent = {
    content: {
        '*/*': any;
    };
};
declare type NotNullJsonHalContent = {
    content: {
        'application/hal+json': any;
    };
};
declare type NotNullJsonContent = {
    content: {
        'application/json': any;
    };
};
declare type ResponseType = {
    200?: {
        content?: {
            '*/*'?: any;
            'application/json'?: any;
            'application/hal+json'?: any;
        };
    } | unknown;
    201?: {
        content?: {
            '*/*'?: any;
        };
    } | unknown;
};
declare type OperationSchemaType = {
    requestBody?: {
        content?: {
            'multipart/form-data'?: {
                [key: string]: any;
            };
            'application/json'?: any;
        };
    };
    parameters?: {
        path?: {
            [key: string]: any;
        };
        query?: {
            [key: string]: {
                [key: string]: any;
            } | any;
        };
    };
    responses: ResponseType;
};
declare type OperationSchema<Url extends keyof Paths, Method extends keyof Paths[Url], Paths = paths> = Paths[Url][Method] extends OperationSchemaType ? Paths[Url][Method] : never;
export {};
