declare type Props = {
    message: string;
    recievingMessage: string[];
    data?: any;
    attempts?: number;
};
export declare function listen<T = any>(type: string[], callback: (data?: T) => any): {
    unsubscribe: () => void;
};
export declare function sendAndRecieve<T>({ message, recievingMessage, data, attempts, }: Props): {
    cancel: () => boolean;
    promise: Promise<T>;
};
export declare function takeScreenshot(): Promise<string>;
export declare function detectExtension(): Promise<boolean>;
export declare type LibConfig = {
    uiPresent: boolean;
    uiVersion?: string;
    mode: 'production' | 'development';
    config: {
        apiUrl: string;
        apiKey: string;
    };
};
export declare function Handshaker(): {
    update: (data: LibConfig) => Promise<boolean>;
};
export {};
