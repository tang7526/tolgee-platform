import { TolgeeInstance } from '@tolgee/core';
export declare const DevTools: () => (tolgee: TolgeeInstance) => Readonly<{
    on: import("@tolgee/core").TolgeeOn<keyof import("@tolgee/core").EventType>;
    onNsUpdate: (handler: import("@tolgee/core").Listener<undefined>) => import("@tolgee/core").SubscriptionSelective;
    setEmmiterActive: (active: boolean) => void;
    getLanguage: () => string | undefined;
    getPendingLanguage: () => string | undefined;
    changeLanguage: (language: string) => Promise<void>;
    changeTranslation: (descriptor: import("@tolgee/core").CacheDescriptor, key: string, value: string) => {
        revert: () => void;
    };
    addActiveNs: (ns: import("@tolgee/core").NsFallback, forget?: boolean | undefined) => Promise<void>;
    removeActiveNs: (ns: import("@tolgee/core").NsFallback) => void;
    loadRecords: (descriptors: import("@tolgee/core").CacheDescriptor[]) => Promise<import("@tolgee/core").TranslationsFlat[]>;
    loadRecord: (descriptor: import("@tolgee/core").CacheDescriptor) => Promise<import("@tolgee/core").TranslationsFlat>;
    addStaticData: (data: import("@tolgee/core").TolgeeStaticData | undefined) => void;
    getRecord: (descriptor: import("@tolgee/core").CacheDescriptor) => import("@tolgee/core").TranslationsFlat | undefined;
    getAllRecords: () => {
        data: import("@tolgee/core").TranslationsFlat;
        language: string;
        namespace: string;
    }[];
    isLoaded: (ns?: import("@tolgee/core").NsFallback) => boolean;
    isInitialLoading: () => boolean;
    isLoading: (ns?: import("@tolgee/core").NsFallback) => boolean;
    isFetching: (ns?: import("@tolgee/core").NsFallback) => boolean;
    isRunning: () => boolean;
    run: () => Promise<void | undefined>;
    stop: () => void;
    t: import("@tolgee/core").TFnType<import("@tolgee/core").DefaultParamType, string>;
    highlight: import("@tolgee/core").HighlightInterface;
    getInitialOptions: () => {
        apiUrl?: string | undefined;
        apiKey?: string | undefined;
        projectId?: string | number | undefined;
        language?: string | undefined;
        defaultLanguage?: string | undefined;
        availableLanguages?: string[] | undefined;
        fallbackLanguage?: import("@tolgee/core").FallbackLanguageOption;
        ns?: string[] | undefined;
        fallbackNs?: import("@tolgee/core").FallbackGeneral;
        defaultNs: string;
        staticData?: import("@tolgee/core").TolgeeStaticData | undefined;
        observerType: "text" | "invisible";
        observerOptions: import("@tolgee/core").ObserverOptionsInternal;
        onFormatError: import("@tolgee/core").OnFormatError;
    };
    isDev: () => boolean;
    wrap: (params: import("@tolgee/core").WrapperWrapProps) => string | undefined;
    unwrap: (text: string) => import("@tolgee/core").Unwrapped;
    overrideCredentials(credentials: import("@tolgee/core").DevCredentials): void;
    addPlugin(plugin: import("@tolgee/core").TolgeePlugin | undefined): void;
    updateOptions(options?: import("@tolgee/core").TolgeeOptions | undefined): void;
}>;
export * from './typedIndex';
export { PREFERRED_LANGUAGES_LOCAL_STORAGE_KEY, DEVTOOLS_ID, } from './constants';
