"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var languageInfo_1 = require("./languageInfo");
describe('generated info', function () {
    test('languageInfo is generated', function () {
        expect(languageInfo_1.languageInfo.en.englishName).toEqual('English');
        expect(languageInfo_1.languageInfo.cs.englishName).toEqual('Czech');
        expect(languageInfo_1.languageInfo.sk.originalName).toEqual('slovenƒçina');
    });
    test('returns correct language info for en', function () {
        var result = languageInfo_1.languageInfo.en;
        expect(result === null || result === void 0 ? void 0 : result.englishName).toEqual('English');
        expect(result === null || result === void 0 ? void 0 : result.originalName).toEqual('English');
        ['GB', 'US', 'IN'].forEach(function (region) {
            expect(result === null || result === void 0 ? void 0 : result.regions).toContain(region);
        });
        ['üá¨üáß', 'üá∫üá∏', 'üáÆüá≥'].forEach(function (region) {
            expect(result === null || result === void 0 ? void 0 : result.flags).toContain(region);
        });
    });
    test('returns correct language info for en-US', function () {
        var result = languageInfo_1.languageInfo['en-US'];
        expect(result === null || result === void 0 ? void 0 : result.englishName).toEqual('English (United States)');
        expect(result === null || result === void 0 ? void 0 : result.originalName).toEqual('English (United States)');
        expect(result === null || result === void 0 ? void 0 : result.regions).toEqual(['US']);
        expect(result === null || result === void 0 ? void 0 : result.flags).toEqual(['üá∫üá∏']);
    });
    test('returns correct language info for cs', function () {
        var result = languageInfo_1.languageInfo['cs'];
        expect(result === null || result === void 0 ? void 0 : result.englishName).toEqual('Czech');
        expect(result === null || result === void 0 ? void 0 : result.originalName).toEqual('ƒçe≈°tina');
        expect(result === null || result === void 0 ? void 0 : result.regions).toEqual(['CZ']);
        expect(result === null || result === void 0 ? void 0 : result.flags).toEqual(['üá®üáø']);
    });
    test('returns correct languages for everything', function () {
        var result = languageInfo_1.languageInfo;
        expect(Object.keys(result).length).toBeGreaterThan(300);
        expect(result['en']).toBeTruthy();
        expect(result['cs']).toBeTruthy();
        expect(result['de']).toBeTruthy();
        expect(result['sk']).toBeTruthy();
        Object.values(result).forEach(function (i) {
            expect(i).toBeTruthy();
        });
    });
    describe('languages', function () {
        test('returns correct language population', function () {
            var population = languageInfo_1.languageInfo['en'].population;
            expect(population).toBeGreaterThan(1000000000);
        });
        test('returns correct language cs', function () {
            var population = languageInfo_1.languageInfo['cs'].population;
            expect(population).toBeGreaterThan(9000000);
        });
        test('returns correct language cs-CZ', function () {
            var population = languageInfo_1.languageInfo['cs-CZ'].population;
            expect(population).toBeGreaterThan(9000000);
        });
        test('returns correct language zh-Hans', function () {
            var population = languageInfo_1.languageInfo['zh-Hans'].population;
            expect(population).toBeGreaterThan(9000000);
        });
        test('returns territory by language', function () {
            var territories = languageInfo_1.languageInfo['cs'].regions;
            expect(territories).toEqual(['CZ']);
        });
        test('returns territory from parsed region', function () {
            var territories = languageInfo_1.languageInfo['en-US'].regions;
            expect(territories).toEqual(['US']);
        });
        test('returns correct territories for english', function () {
            var territories = languageInfo_1.languageInfo['en'].regions;
            expect(territories.length).toEqual(89);
            expect(territories[0]).toEqual('GB');
            expect(territories[1]).toEqual('US');
        });
        test('returns territories for spanish', function () {
            var territories = languageInfo_1.languageInfo['es'].regions;
            expect(territories.length).toEqual(23);
            expect(territories[0]).toEqual('ES');
        });
        test('returns territories for french', function () {
            var territories = languageInfo_1.languageInfo['fr'].regions;
            expect(territories.length).toEqual(45);
            expect(territories[0]).toEqual('FR');
        });
    });
});
//# sourceMappingURL=languageInfo.test.js.map