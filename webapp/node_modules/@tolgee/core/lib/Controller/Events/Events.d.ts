import { CacheDescriptorWithKey, TolgeeOn } from '../../types';
export declare const Events: (getFallbackNs: () => string[], getDefaultNs: () => string) => Readonly<{
    onPendingLanguageChange: import("./EventEmitter").EventEmitterInstance<string>;
    onLanguageChange: import("./EventEmitter").EventEmitterInstance<string>;
    onLoadingChange: import("./EventEmitter").EventEmitterInstance<boolean>;
    onFetchingChange: import("./EventEmitter").EventEmitterInstance<boolean>;
    onInitialLoaded: import("./EventEmitter").EventEmitterInstance<void>;
    onRunningChange: import("./EventEmitter").EventEmitterInstance<boolean>;
    onCacheChange: import("./EventEmitter").EventEmitterInstance<CacheDescriptorWithKey>;
    onUpdate: import("./EventEmitterSelective").EventEmitterSelectiveInstance;
    setEmmiterActive: (active: boolean) => void;
    on: TolgeeOn<keyof import("../../types").EventType>;
}>;
export declare type EventsInstance = ReturnType<typeof Events>;
