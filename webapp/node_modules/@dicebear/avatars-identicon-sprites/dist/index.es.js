import legacy, { utils } from '@dicebear/avatars';

const schema$1 = {
  "title": "Options",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "colors": {
      "title": "Colors",
      "type": "array",
      "items": {
        "type": "string",
        "enum": ["amber", "blue", "blueGrey", "brown", "cyan", "deepOrange", "deepPurple", "green", "grey", "indigo", "lightBlue", "lightGreen", "lime", "orange", "pink", "purple", "red", "teal", "yellow"]
      }
    },
    "colorLevel": {
      "title": "Color Level",
      "default": 600,
      "type": "integer",
      "enum": [50, 100, 200, 300, 400, 500, 600, 700, 800, 900]
    }
  },
  "additionalProperties": false
};

const style = {
  meta: {
    title: 'Identicon',
    creator: 'Florian Körner',
    source: 'https://github.com/dicebear/dicebear',
    license: {
      name: 'CC0 1.0',
      url: 'https://creativecommons.org/publicdomain/zero/1.0/'
    }
  },
  schema: schema$1,
  create: _ref => {
    let {
      prng,
      options
    } = _ref;
    let defaults = utils.schema.defaults(schema$1);
    let colors = [];
    Object.keys(legacy.color.collection).forEach(color => {
      if (options.colors === undefined || options.colors.length === 0 || options.colors.indexOf(color) !== -1) {
        let colorCollection = legacy.color.collection[color];
        colors.push(colorCollection[options.colorLevel || defaults.colorLevel]);
      }
    });
    let color = prng.pick(colors); // prettier-ignore

    let body = [// Row 1
    prng.pick(["<path d=\"M0 4h1v1H0V4zm4 0h1v1H4V4z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 4h2v1H0V4zm3 0h2v1H3V4z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 4h5v1H0V4z\" fill=\"".concat(color, "\"/>"), "<path d=\"M2 4h1v1H2V4z\" fill=\"".concat(color, "\"/>"), "<path d=\"M1 4h3v1H1V4z\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 4h1v1H0V4zm2 0h1v1H2V4zm2 0h1v1H4V4z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>")]), // Row 2
    prng.pick(["<path d=\"M0 3h1v1H0V3zm4 0h1v1H4V3z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 3h2v1H0V3zm3 0h2v1H3V3z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 3h5v1H0V3z\" fill=\"".concat(color, "\"/>"), "<path d=\"M2 3h1v1H2V3z\" fill=\"".concat(color, "\"/>"), "<path d=\"M1 3h3v1H1V3z\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 3h1v1H0V3zm2 0h1v1H2V3zm2 0h1v1H4V3z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>")]), // Row 3
    prng.pick(["<path d=\"M0 2h1v1H0V2zm4 0h1v1H4V2z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 2h2v1H0V2zm3 0h2v1H3V2z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 2h5v1H0V2z\" fill=\"".concat(color, "\"/>"), "<path d=\"M2 2h1v1H2V2z\" fill=\"".concat(color, "\"/>"), "<path d=\"M1 2h3v1H1V2z\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 2h1v1H0V2zm2 0h1v1H2V2zm2 0h1v1H4V2z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>")]), // Row 4
    prng.pick(["<path d=\"M0 1h1v1H0V1zm4 0h1v1H4V1z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 1h2v1H0V1zm3 0h2v1H3V1z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 1h5v1H0V1z\" fill=\"".concat(color, "\"/>"), "<path d=\"M2 1h1v1H2V1z\" fill=\"".concat(color, "\"/>"), "<path d=\"M1 1h3v1H1V1z\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 1h1v1H0V1zm2 0h1v1H2V1zm2 0h1v1H4V1z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>")]), // Row 5
    prng.pick(["<path d=\"M0 0h1v1H0V0zm4 0h1v1H4V0z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 0h2v1H0V0zm3 0h2v1H3V0z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 0h5v1H0V0z\" fill=\"".concat(color, "\"/>"), "<path d=\"M2 0h1v1H2V0z\" fill=\"".concat(color, "\"/>"), "<path d=\"M1 0h3v1H1V0z\" fill=\"".concat(color, "\"/>"), "<path d=\"M0 0h1v1H0V0zm2 0h1v1H2V0zm2 0h1v1H4V0z\" fill-rule=\"evenodd\" fill=\"".concat(color, "\"/>")])].join('');
    return {
      attributes: {
        viewBox: '0 0 5 5',
        'shape-rendering': 'crispEdges'
      },
      body
    };
  }
};

/*!
 * DiceBear Identicon (@dicebear/avatars-identicon-sprites)
 *
 * Code licensed under MIT (https://github.com/dicebear/dicebear/blob/v4/packages/avatars-identicon-sprites/LICENSE)
 * Copyright (c) 2021 Florian Körner
 */
let {
  create,
  meta,
  schema
} = style;
/** @deprecated will be removed in Version 5.0 */

var index = utils.style.createLegacyWrapper({
  create,
  meta,
  schema
});

export { create, index as default, meta, schema };
