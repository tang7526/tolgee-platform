/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.hibernate:hibernate-gradle-plugin:5.6.10.Final"
    }
}

plugins {
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
    id 'java'
    id 'org.liquibase.gradle'
    id 'org.jetbrains.kotlin.jvm'
    id "kotlin-jpa"
    id "org.jetbrains.kotlin.kapt"
    id "kotlin-allopen"
}

group = 'io.tolgee'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    ktlint
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "org.jetbrains.kotlin.plugin.spring"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-kapt"
apply plugin: 'kotlin'
apply plugin: 'org.hibernate.orm'

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = 11

idea {
    module {
        generatedSourceDirs += files('build/generated/source/kapt/main', 'build/generated/source/kaptKotlin/main')
    }
}

hibernate {
    enhance {
        enableLazyInitialization = true
        enableDirtyTracking = true
        enableAssociationManagement = false
        enableExtendedEnhancement = false
    }
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("org.springframework.stereotype.Component")
    annotation("org.springframework.transaction.annotation.Transactional")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.beans.factory.annotation.Configurable")
}

apply from: "$rootDir/gradle/liquibase.gradle"

configureLiquibase("public", "hibernate:spring:io.tolgee", 'src/main/resources/db/changelog/schema.xml')

diff.dependsOn compileKotlin
diffChangeLog.dependsOn compileKotlin

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    /**
     * SPRING
     */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.data:spring-data-envers")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation('org.springframework.boot:spring-boot-starter-test')
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-batch"

    /**
     * DB
     */
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.hibernate:hibernate-jpamodelgen'
    kapt "org.hibernate:hibernate-jpamodelgen"

    /**
     * Liquibase
     */
    implementation libs.liquibaseCore
    liquibaseRuntime libs.liquibaseCore
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:3.0.2')
    liquibaseRuntime libs.liquibaseHibernate
    liquibaseRuntime libs.kotlinReflect
    liquibaseRuntime sourceSets.main.output
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'

    /**
     * Testing
     */
    implementation libs.assertJCore
    implementation libs.springmockk
    testImplementation libs.mockito
    implementation libs.jsonUnitAssert
    testImplementation(project(":testing"))

    /**
     * Kotlin
     */
    implementation libs.kotlinReflect
    liquibaseRuntime libs.kotlinReflect
    implementation libs.kotlinCoroutines

    /**
     * SPRING DOC
     */
    implementation libs.springDocOpenApiWebMvcCore
    implementation libs.springDocOpenApiKotlin

    /**
     * MISC
     */
    implementation libs.commonsCodec
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'
    implementation libs.icu4j
    implementation libs.jjwtApi
    implementation libs.jjwtImpl
    implementation libs.jjwtJackson
    implementation libs.jacksonModuleKotlin
    implementation 'net.datafaker:datafaker:1.5.0'
    implementation 'jaxen:jaxen:1.2.0'
    implementation libs.sendInBlue
    implementation libs.sentry
    implementation "com.vladmihalcea:hibernate-types-55:2.14.1"
    liquibaseRuntime "com.vladmihalcea:hibernate-types-55:2.14.1"
    implementation 'com.eatthepath:java-otp:0.4.0'

    /**
     * Google translation API
     */
    implementation platform(libs.googleCloud)
    implementation 'com.google.cloud:google-cloud-translate'

    /**
     * AWS
     */
    implementation libs.amazonS3
    implementation libs.amazonTranslate

    /**
     * MISC MODULE
     */
    implementation(project(':misc'))
}

test {
    useJUnitPlatform()
    maxHeapSize = "2048m"
}

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

tasks.findByName("jar").enabled(true)
tasks.findByName("bootJar").enabled(false)
