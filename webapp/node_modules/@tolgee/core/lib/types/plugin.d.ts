import { ChangeTranslationInterface, TreeTranslationsData } from './cache';
import { NsFallback, NsType, TranslateParams, TranslatePropsInternal } from './general';
import type { ObserverOptionsInternal } from '../Controller/State/observerOptions';
import { TolgeeInstance } from '../TolgeeCore';
export declare type BackendDevProps = {
    apiUrl?: string;
    apiKey?: string;
    projectId?: number | string;
};
export declare type BackendGetRecordProps = {
    language: string;
    namespace?: string;
};
export declare type BackendGetRecord = (data: BackendGetRecordProps) => Promise<TreeTranslationsData | undefined> | undefined;
export interface BackendMiddleware {
    getRecord: BackendGetRecord;
}
export declare type BackendGetDevRecord = (data: BackendGetRecordProps & BackendDevProps) => Promise<TreeTranslationsData | undefined> | undefined;
export declare type BackendDevMiddleware = {
    getRecord: BackendGetDevRecord;
};
export declare type KeyAndParams = {
    key: string;
    params?: TranslateParams;
    defaultValue?: string;
    ns?: NsType;
};
export declare type Unwrapped = {
    text: string;
    keys: KeyAndParams[];
};
export declare type WrapperWrapProps = Pick<TranslatePropsInternal, 'key' | 'params' | 'defaultValue' | 'ns' | 'translation'>;
export declare type WrapperWrapFunction = (props: WrapperWrapProps) => string;
export declare type WrapperUnwrapFunction = (text: string) => Unwrapped;
export declare type WrapperAttributeXPathGetter = (props: {
    tag: string;
    attribute: string;
}) => string;
export declare type HighlightInterface = (key?: string, ns?: NsFallback) => Highlighter;
export declare type ObserverRunProps = {
    mouseHighlight: boolean;
    options: ObserverOptionsInternal;
    translate: (params: TranslatePropsInternal) => string;
    onClick: TranslationOnClick;
};
export declare type ObserverMiddleware = () => {
    unwrap: (text: string) => Unwrapped;
    wrap: WrapperWrapFunction;
    retranslate: () => void;
    stop: () => void;
    run: (props: ObserverRunProps) => void;
    highlight: HighlightInterface;
    outputNotFormattable: boolean;
};
export declare type LanguageDetectorProps = {
    availableLanguages: string[];
};
export declare type LanguageDetectorMiddleware = {
    getLanguage: (props: LanguageDetectorProps) => string | undefined | Promise<string | undefined>;
};
export declare type LanguageStorageMiddleware = {
    getLanguage: () => string | undefined | Promise<string | undefined>;
    setLanguage: (language: string) => void | Promise<void>;
};
export declare type DevCredentials = undefined | {
    apiUrl?: string;
    apiKey?: string;
    projectId?: string | number;
};
export declare type WrapperMiddleware = {
    unwrap: WrapperUnwrapFunction;
    wrap: WrapperWrapFunction;
    getTextXPath: () => string;
    getAttributeXPath: WrapperAttributeXPathGetter;
};
export declare type FormatterMiddlewareFormatParams = {
    translation: string;
    language: string;
    params: Record<string, any> | undefined;
};
export declare type FormatterMiddleware = {
    format: (props: FormatterMiddlewareFormatParams) => string;
};
export declare type TranslationOnClick = (data: {
    keysAndDefaults: KeyAndParams[];
    event: any;
}) => void;
export declare type Highlighter = {
    unhighlight(): void;
};
export declare type FinalFormatterMiddleware = {
    format: (props: FormatterMiddlewareFormatParams) => any;
};
export declare type UiProps = {
    apiUrl: string;
    apiKey: string;
    projectId: number | string | undefined;
    highlight: HighlightInterface;
    changeTranslation: ChangeTranslationInterface;
};
export declare type UiKeyOption = {
    key: string;
    defaultValue?: string;
    ns: string[];
    translation: string | undefined;
};
export declare type UiMiddleware = (props: UiProps) => UiInterface;
export interface UiInterface {
    handleElementClick(keysAndDefaults: UiKeyOption[], event: any): Promise<void>;
}
export declare type PluginTools = Readonly<{
    setFinalFormatter: (formatter: FinalFormatterMiddleware | undefined) => void;
    addFormatter: (formatter: FormatterMiddleware | undefined) => void;
    setObserver: (observer: ObserverMiddleware | undefined) => void;
    hasObserver: () => boolean;
    setUi: (ui: UiMiddleware | undefined) => void;
    hasUi: () => boolean;
    addBackend: (backend: BackendMiddleware | undefined) => void;
    setDevBackend: (backend: BackendDevMiddleware | undefined) => void;
    setLanguageDetector: (languageDetector: LanguageDetectorMiddleware | undefined) => void;
    setLanguageStorage: (languageStorage: LanguageStorageMiddleware | undefined) => void;
}>;
export declare type TolgeePlugin = (tolgee: TolgeeInstance, tools: PluginTools) => TolgeeInstance;
export declare type FormatErrorHandler = (error: string, info: TranslatePropsInternal) => string;
export declare type OnFormatError = string | FormatErrorHandler;
