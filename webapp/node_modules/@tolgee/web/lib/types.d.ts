import type { BackendGetRecordProps, DevCredentials, KeyAndParams, TreeTranslationsData } from '@tolgee/core';
export declare type InContextOptions = {
    credentials?: DevCredentials;
};
export declare type NodeLock = {
    locked?: boolean;
};
export declare type TolgeeElement = Element & ElementCSSInlineStyle & {
    _tolgee?: boolean;
};
export declare type BackendOptions = Omit<RequestInit, 'headers'> & {
    /**
     * Path prefix (default: '/i18n')
     */
    prefix: string;
    /**
     * Generate own path based on namespace, language and prefix
     */
    getPath: GetPath;
    /**
     * Custom headers
     */
    headers: Record<string, string>;
    /**
     * Extract data from fetch response (default: (r) => r.json())
     */
    getData: (r: Response) => Promise<TreeTranslationsData | undefined>;
};
export declare type GetPath = (options: BackendGetRecordProps & {
    prefix: string;
}) => string;
export declare type KeyDescriptorInternal = {
    key?: string;
    ns?: string[] | undefined;
};
export declare type NodeMeta = {
    oldTextContent: string;
    keys: KeyAndParams[];
    keyAttributeOnly?: boolean;
};
export declare type ElementMeta = {
    wrappedWithElementOnlyKey?: string;
    wrappedWithElementOnlyDefaultHtml?: string;
    nodes: Map<Node, NodeMeta>;
    highlightEl?: HTMLDivElement;
    highlight?: () => void;
    unhighlight?: () => void;
    /**
     * Stops removing of element's inactive nodes and
     * unregistering from ElementRegistrar.
     *
     * It's used when user has mouse on the element, so there is
     * potential, that element highlight will be triggered.
     *
     * Triggering highlight needs the metadata stored on element, so
     * we need the ability to prevent clean.
     */
    preventClean?: boolean;
};
