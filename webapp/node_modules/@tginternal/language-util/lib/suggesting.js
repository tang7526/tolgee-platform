"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compare = exports.getItemWithPopulation = exports.suggest = void 0;
var latinize_1 = __importDefault(require("latinize"));
var languageInfo_1 = require("./generated/languageInfo");
var suggest = function (input, limit) {
    if (limit === void 0) { limit = 10; }
    var result = Object.entries(languageInfo_1.languageInfo).map(function (_a) {
        var _b = __read(_a, 2), languageId = _b[0], value = _b[1];
        return exports.getItemWithPopulation(languageId, value);
    });
    input = latinize_1.default(input).replace('_', '-').toLowerCase();
    result.sort(exports.compare(input));
    return result.slice(0, limit).map(function (i) {
        delete i.population;
        return i;
    });
};
exports.suggest = suggest;
var getItemWithPopulation = function (languageId, value) {
    return {
        languageId: languageId,
        originalName: value.originalName,
        englishName: value.englishName,
        flags: value.flags,
        population: value.population,
    };
};
exports.getItemWithPopulation = getItemWithPopulation;
var compare = function (input) {
    return function (a, b) {
        var aNormalized = normalizeResult(a);
        var bNormalized = normalizeResult(b);
        if (aNormalized.languageId.indexOf(input) === 0 &&
            bNormalized.languageId.indexOf(input) !== 0) {
            return -1;
        }
        if (bNormalized.languageId.indexOf(input) === 0 &&
            aNormalized.languageId.indexOf(input) !== 0) {
            return 1;
        }
        if (aNormalized.originalName.indexOf(input) === 0 &&
            bNormalized.originalName.indexOf(input) !== 0) {
            return -1;
        }
        if (bNormalized.originalName.indexOf(input) === 0 &&
            aNormalized.originalName.indexOf(input) !== 0) {
            return 1;
        }
        if (aNormalized.englishName.indexOf(input) === 0 &&
            bNormalized.englishName.indexOf(input)) {
            return -1;
        }
        if (bNormalized.englishName.indexOf(input) === 0 &&
            aNormalized.englishName.indexOf(input)) {
            return 1;
        }
        //if both tags start with user input, let population win, since tags are short and result is then more relevant
        if (aNormalized.languageId.indexOf(input) === 0 &&
            bNormalized.languageId.indexOf(input) === 0 &&
            bNormalized.population &&
            aNormalized.population) {
            return bNormalized.population - aNormalized.population;
        }
        var samePartDifferences = {
            englishName: samePartLength(bNormalized.englishName, input) -
                samePartLength(aNormalized.englishName, input),
            originalName: samePartLength(bNormalized.originalName, input) -
                samePartLength(aNormalized.originalName, input),
            languageId: samePartLength(bNormalized.languageId, input) -
                samePartLength(aNormalized.languageId, input),
        };
        if (samePartDifferences.englishName !== 0) {
            return samePartDifferences.englishName;
        }
        if (samePartDifferences.originalName !== 0) {
            return samePartDifferences.originalName;
        }
        if (samePartDifferences.languageId !== 0) {
            return samePartDifferences.languageId;
        }
        return (languageInfo_1.languageInfo[b.languageId].population -
            languageInfo_1.languageInfo[a.languageId].population);
    };
};
exports.compare = compare;
var normalizeResult = function (result) {
    return __assign(__assign({}, result), { originalName: latinize_1.default(result.originalName).toLowerCase(), englishName: latinize_1.default(result.englishName).toLowerCase(), languageId: result.languageId.toLowerCase() });
};
var diff = function (diffMe, diffBy) { return diffMe.split(diffBy).join(''); };
var samePartLength = function (diffMe, diffBy) {
    return diffMe.length - diff(diffMe, diffBy).length;
};
//# sourceMappingURL=suggesting.js.map