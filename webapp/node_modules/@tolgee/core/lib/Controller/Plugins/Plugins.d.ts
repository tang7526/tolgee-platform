import { BackendDevMiddleware, BackendGetRecord, TranslatePropsInternal, HighlightInterface, LanguageDetectorMiddleware, LanguageStorageMiddleware, ChangeTranslationInterface, WrapperWrapProps, Unwrapped, KeyAndNamespacesInternal, TolgeePlugin, TolgeeInstance, TolgeeOptionsInternal } from '../../types';
export declare const Plugins: (getLanguage: () => string | undefined, getInitialOptions: () => TolgeeOptionsInternal, getAvailableLanguages: () => string[] | undefined, getTranslationNs: (props: KeyAndNamespacesInternal) => string[], getTranslation: (props: KeyAndNamespacesInternal) => string | undefined, changeTranslation: ChangeTranslationInterface) => Readonly<{
    addPlugin: (tolgeeInstance: TolgeeInstance, plugin: TolgeePlugin) => void;
    formatTranslation: ({ formatEnabled, ...props }: {
        key: string;
        defaultValue?: string | undefined;
        params?: import("../../types").TranslateParams<import("../../types").DefaultParamType> | undefined;
    } & import("../../types").TranslateOptions & {
        translation?: string | undefined;
    } & {
        formatEnabled?: boolean | undefined;
    }) => string;
    getDevBackend: () => BackendDevMiddleware | undefined;
    getBackendRecord: BackendGetRecord;
    getBackendDevRecord: BackendGetRecord;
    getLanguageDetector: () => LanguageDetectorMiddleware | undefined;
    getLanguageStorage: () => LanguageStorageMiddleware | undefined;
    getInitialLanguage: () => string | Promise<string | undefined> | Promise<string | Promise<string | undefined> | undefined> | undefined;
    setStoredLanguage: (language: string) => void;
    run: () => void;
    stop: () => void;
    retranslate: () => void;
    highlight: HighlightInterface;
    unwrap: (text: string) => Unwrapped;
    wrap: (params: WrapperWrapProps) => string | undefined;
    hasDevBackend: () => boolean;
}>;
export declare type PluginsInstance = ReturnType<typeof Plugins>;
